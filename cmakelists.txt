cmake_minimum_required(VERSION 3.26)

# Set compilers (before project() call)
set(CMAKE_C_COMPILER "/opt/homebrew/bin/gcc-14")
set(CMAKE_CXX_COMPILER "/opt/homebrew/bin/g++-14")

project(SimpleRenderer 
    VERSION 1.0.0
    DESCRIPTION "Simple Rasterization Renderer"
    LANGUAGES CXX
)

# Set C++20 standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Set build type if not specified
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Build type" FORCE)
endif()
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")

# Compiler options
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -O0")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")

# Find OpenMP
find_package(OpenMP REQUIRED)
if(OpenMP_CXX_FOUND)
    message(STATUS "Successfully loaded OpenMP compiler flags: ${OpenMP_CXX_FLAGS}")
else()
    message(FATAL_ERROR "OpenMP not found!")
endif()

# Find SDL2
find_package(SDL2 REQUIRED)
if(SDL2_FOUND)
    message(STATUS "Successfully found SDL2: ${SDL2_INCLUDE_DIRS}")
else()
    # 如果find_package找不到SDL2，尝试使用Homebrew路径
    set(SDL2_INCLUDE_DIRS "/opt/homebrew/include")
    set(SDL2_LIBRARIES "/opt/homebrew/lib/libSDL2.dylib")
    if(EXISTS "${SDL2_LIBRARIES}")
        message(STATUS "Using SDL2 from Homebrew: ${SDL2_INCLUDE_DIRS}")
    else()
        message(FATAL_ERROR "SDL2 not found! Please install SDL2 using Homebrew: brew install sdl2")
    endif()
endif()

# Set include directories
# include_directories(
#     ${CMAKE_CURRENT_SOURCE_DIR}
#     ${CMAKE_CURRENT_SOURCE_DIR}/src
#     ${CMAKE_CURRENT_SOURCE_DIR}/src/lib
#     ${CMAKE_CURRENT_SOURCE_DIR}/src/core
#     ${CMAKE_CURRENT_SOURCE_DIR}/src/shader
#     ${CMAKE_CURRENT_SOURCE_DIR}/src/platform
#     ${CMAKE_CURRENT_SOURCE_DIR}/src/scene
#     ${SDL2_INCLUDE_DIRS}
# )

# Find all source files
file(GLOB_RECURSE MAIN_SRC "main.cpp")
file(GLOB_RECURSE LIB_SRC "src/lib/*.cpp")
file(GLOB_RECURSE CORE_SRC "src/core/*.cpp")
file(GLOB_RECURSE SHADER_SRC "src/shader/*.cpp")
file(GLOB_RECURSE PLATFORM_SRC "src/platform/*.cpp")
file(GLOB_RECURSE SCENE_SRC "src/scene/*.cpp")
file(GLOB_RECURSE SRC "src/*.cpp")

# Exclude texture subdirectory, it will be handled separately
list(FILTER LIB_SRC EXCLUDE REGEX ".*texture/.*\\.cpp$")

# Combine all source files
set(SRC_LIST
    ${MAIN_SRC}
    ${LIB_SRC}
    ${CORE_SRC}
    ${SHADER_SRC}
    ${PLATFORM_SRC}
    ${SCENE_SRC}
    ${SRC}
)

# Add texture subdirectory
add_subdirectory(src/lib/texture)

# Create executable
add_executable(SimpleRenderer ${SRC_LIST})

# Set include directories (using target_include_directories instead of include_directories)
target_include_directories(SimpleRenderer PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/src
    ${CMAKE_CURRENT_SOURCE_DIR}/src/lib
    ${CMAKE_CURRENT_SOURCE_DIR}/src/core
    ${CMAKE_CURRENT_SOURCE_DIR}/src/shader
    ${CMAKE_CURRENT_SOURCE_DIR}/src/platform
    ${CMAKE_CURRENT_SOURCE_DIR}/src/scene
    ${SDL2_INCLUDE_DIRS}
)

# Link OpenMP, SDL2 and texture libraries
target_link_libraries(SimpleRenderer PRIVATE 
    OpenMP::OpenMP_CXX
    texture
    ${SDL2_LIBRARIES}
)

# Set resource directories as definitions
target_compile_definitions(SimpleRenderer PRIVATE
    ASSETS_DIR="${CMAKE_CURRENT_SOURCE_DIR}/../assets"
    OUTPUT_DIR="${CMAKE_CURRENT_SOURCE_DIR}/../output"
)

# Install target
install(TARGETS SimpleRenderer
    RUNTIME DESTINATION bin
)

# Print compiler information
message(STATUS "C compiler: ${CMAKE_C_COMPILER}")
message(STATUS "C++ compiler: ${CMAKE_CXX_COMPILER}")
message(STATUS "C++ standard: ${CMAKE_CXX_STANDARD}")